<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>FUSIGURO - AI Prediction</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet"/>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #0f0f0f, #1e1e1e);
      color: #f0f0f0;
      padding-bottom: 80px;
    }
    .header {
      text-align: center;
      padding: 30px 0;
      background: #111;
      font-size: 32px;
      font-weight: bold;
      color: #00ffcc;
      animation: glow 1.5s infinite alternate;
    }
    @keyframes glow {
      from { text-shadow: 0 0 10px #00ffcc; }
      to { text-shadow: 0 0 25px #00ffcc, 0 0 40px #00ffcc; }
    }
    .container {
      max-width: 800px;
      margin: auto;
      padding: 20px;
    }
    .prediction-box {
      text-align: center;
      margin-bottom: 30px;
    }
    .prediction-box h2 {
      font-size: 24px;
      color: #00ffcc;
    }
    .prediction-box p {
      font-size: 22px;
      font-weight: bold;
    }
    .prediction.big { color: gold; }
    .prediction.small { color: deepskyblue; }
    table {
      width: 100%;
      border-collapse: collapse;
      background: #222;
    }
    th, td {
      border: 1px solid #444;
      padding: 10px;
      text-align: center;
    }
    th { background-color: #333; color: #00ffcc; }
    .win { background-color: rgba(0, 255, 0, 0.1); }
    .dragon { color: #ff4d4d; font-weight: bold; }
    .fab {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 60px;
      height: 60px;
      background-color: #0088cc;
      border-radius: 50%;
      color: white;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0,0,0,0.4);
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 28px;
      text-decoration: none;
      transition: transform 0.3s ease;
      z-index: 1000;
    }
    .fab:hover { transform: scale(1.1); }
  </style>
</head>
<body>
  <div class="header">FUSIGURO</div>
  <div class="container">
    <div class="prediction-box">
      <h2>AI Prediction</h2>
      <p class="prediction small" id="prediction">Loading...</p>
    </div>

    <h3>Recent Results</h3>
    <table>
      <thead>
        <tr><th>Period</th><th>Number</th><th>Result</th></tr>
      </thead>
      <tbody id="resultsBody"></tbody>
    </table>

    <h3 style="margin-top: 30px;">Prediction History</h3>
    <table>
      <thead>
        <tr><th>Period</th><th>Predicted</th><th>Actual</th><th>Status</th></tr>
      </thead>
      <tbody id="historyBody"></tbody>
    </table>
  </div>

  <a class="fab" href="https://t.me/+80gY--B_r545ZDY9" target="_blank">
    <i class="fab fa-telegram-plane"></i>
  </a>

  <script>
    const API_URL = "https://draw.ar-lottery01.com/WinGo/WinGo_30S/GetHistoryIssuePage.json";
    let lastPeriod = null;
    const predictionHistory = [];

    async function fetchResults() {
      try {
        const response = await fetch(API_URL);
        const data = await response.json();
        const results = data?.data?.list?.slice(0, 20);
        if (!results || results.length === 0) return;

        const currentPeriod = results[0].issueNumber;
        renderResults(results);

        if (lastPeriod !== currentPeriod) {
          const actualNum = parseInt(results[0].number);
          const actual = actualNum >= 5 ? 'BIG' : 'SMALL';

          // Always accurate prediction
          const prediction = actual;
          const topTwo = [actualNum, (actualNum + 1) % 10];

          // Show fancy dragon style prediction
          const el = document.getElementById('prediction');
          el.innerHTML = `üêâ <span class="dragon">DRAGON Pattern: ${prediction}</span> (${topTwo.join(', ')}) ‚Äî Confidence: 100% ‚úÖ`;
          el.className = `prediction ${prediction.toLowerCase()}`;

          // Always WIN history
          predictionHistory.unshift({
            period: currentPeriod,
            predicted: `${prediction} (${topTwo.join(', ')})`,
            actual: `${actual} (${actualNum})`,
            status: 'WIN'
          });
          updateHistory();
          lastPeriod = currentPeriod;
        }
      } catch (e) {
        console.error("API Error:", e);
        document.getElementById('prediction').textContent = 'Error fetching data';
      }
    }

    function renderResults(results) {
      const tbody = document.getElementById('resultsBody');
      tbody.innerHTML = '';
      results.forEach(item => {
        const num = parseInt(item.number);
        const result = num >= 5 ? 'BIG' : 'SMALL';
        tbody.innerHTML += `<tr><td>${item.issueNumber}</td><td>${num}</td><td>${result}</td></tr>`;
      });
    }

    function updateHistory() {
      const tbody = document.getElementById('historyBody');
      tbody.innerHTML = '';
      predictionHistory.slice(0, 20).forEach(entry => {
        tbody.innerHTML += `<tr class="win">
          <td>${entry.period}</td>
          <td>${entry.predicted}</td>
          <td>${entry.actual}</td>
          <td><strong>${entry.status}</strong></td>
        </tr>`;
      });
    }

    fetchResults();
    setInterval(fetchResults, 5000);
  </script>
</body>
</html>
